#!/bin/bash
. "$INSTALL_DIR/spx-core"

usage() {
    echo "usage: $PGM_BIN cat-file <sha> [--output=<file>]"
}

if [ -z "$1" ]; then
    usage
    exit 0
fi

while (( "$#" )); do
    case "$1" in
        -o)
            if [ -z "$2" ]; then
                echo "No output file specified."
                exit 1
            else
                _out_file=$2
                shift 2
            fi
            ;;
        --output=*)
            _out_file=${1#*=}
            shift
            ;;

        -*|--*=)
            echo "Unsupported flag $1." >&2
            exit 1
            ;;

        *)
            if [ -z "$_sha" ]; then
                _sha=$1
                shift
            else
                echo "Extra argument \"$1\""
                exit 1
            fi
            ;;
    esac
done

if [ ${#_sha} -lt 3 ]; then
    echo "Must provide at least 3 characters of SHA."
    exit 1

# entire SHA
elif [ ${#_sha} -eq 40 ]; then
    _object="$DATA_DIR/objects/${_sha:0:2}/${_sha:2}"
    if [ ! -r "$_object" ]; then
        echo "Object \"$_object\" not readable."
        exit 1
    fi

# find matching SHA
else
    _object=$(find "$DATA_DIR/objects/${_sha:0:2}" -name "${_sha:2}*" -printf '%f\n')

    if [ -z "$_object" ]; then
        echo "No object found matching \"$_sha\"."
        exit 1
    fi

    if [ $(echo "$_object" | wc -l) -gt 1 ]; then
        echo "More than one object found matching \"$_sha\"."
        exit 1
    fi

    _object="$DATA_DIR/objects/${_sha:0:2}/$_object"
fi

_blob=$(mktemp /tmp/$PGM_BIN-cat-file.XXXXXX)

zcat "$_object" > "$_blob"
IFS= read -r -d '' _header < "$_blob"

if [ "${_header:0:4}" != "blob" ]; then
    echo "Corrupt object file, invalid signature."
    exit 1
fi

_header_len=$(( ${#_header} + 1 ))
_expected_size=$(( $_header_len + ${_header:5} ))
_size=$(stat --format %s "$_blob")

if [ $_size -ne $_expected_size ]; then
    echo "Corrupt object file, size missmatch."
    exit 1
fi

_file_start=$(( $_header_len + 1 ))
if [ -n "$_out_file" ]; then
    tail -c +$_file_start "$_blob" > "$_out_file"
else
    tail -c +$_file_start "$_blob"
fi

rm "$_blob"

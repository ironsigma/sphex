#!/bin/bash
. "$INSTALL_DIR/spx-core"

usage() {
    cat <<-EOF
Sphex v$PGM_VERSION - Check-in a file into the repository

Usage: $PGM_BIN ci [-h] (-n | -m <msg>) <file>

If the file contents and mode matches the latest commit, no new commit will
be created.

Options:
    -h, --help                 Show help
    -m <msg>, --message=<msg>  Message for check-in
    -n, --allow-empty-message  Check-in without message
EOF
}

if [[ -z "$1" || "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    exit 0
fi

while (( "$#" )); do
    case "$1" in
        -m)
            if [ -z "$2" ]; then
                echo "No message specified." >&2
                exit 1
            else
                _message="$2"
                shift 2
            fi
            ;;

        --message)
            _message=${1#*=}
            ;;

        -n|--allow-empty-message)
            _allow_empty_message=true
            shift
            ;;

        -*|--*=)
            echo "Unsupported flag $1." >&2
            exit 1
            ;;

        *)
            if [ -z "$_file" ]; then
                _file=$1
                shift
            else
                echo "Extra argument \"$1\"" >&2
                exit 1
            fi
            ;;
    esac
done

if [[ -z "$_message" && -z "$_allow_empty_message" ]]; then
    echo "No message for check-in." >&2
    exit 1
fi

if [ ! -r "$_file" ]; then
    echo "Cannot read file \"$_file\"." >&2
    exit 1
fi

# Get relative path
_root="$(dirname "$DATA_DIR")/"
_rel_file=$(echo "$(realpath $_file)" | sed -e "s/${_root//\//\\\/}//")
_esc_rel_file=${_rel_file//./\\.}

# For mode only regular file plus unix perms are used.
# POSIX types and mode:
#   4-bit type  1000 regular file, 0100, dir, 1010 symlink, 1110 gitlink
#   3-bit unused
#   9-bit unix perm
_mode=$(stat --printf="1%05a\n" "$_file")
_parent=$(grep -x "[a-f0-9]\{40\}\s$_esc_rel_file" "$DATA_DIR/refs" | sed -e 's/\t.*//')

if [ -n "$_parent" ]; then
    _parent_meta=$("$PGM_BIN" cat-file "$_parent")
    _old_mode=$(echo "$_parent_meta" | grep '^mode\s' | head -n 1 | sed -e 's/mode\s//')

    # modes match, check the sha
    if [ "$_old_mode" == "$_mode" ]; then
        _old_sha=$(echo "$_parent_meta" | grep '^blob\s' | head -n 1 | sed -e 's/blob\s//')
        _new_sha=$("$PGM_BIN" hash-file "$_file")
        if [ "$_old_sha" == "$_new_sha" ]; then
            echo "No changes since last check-in."
            exit 0
        fi
    fi
fi

_author='Juan D Frias <juandfrias@gmail.com>'
_file_sha=$("$PGM_BIN" hash-file --write "$_file")
_date=$(date +"%s %z")
_blob=$(mktemp "/tmp/$PGM_BIN-ci-file.XXXXXX")

if [ -n "$_parent" ]; then
    echo "parent${TAB}$_parent" >> "$_blob"
fi

if [ -n "$_message" ]; then
    _message="$NL$NL$_message"
fi

# Add rest of info
cat >> "$_blob" <<EOF
blob${TAB}$_file_sha
author${TAB}$_author
date${TAB}$_date
mode${TAB}$_mode$_message
EOF

_ci_sha=$("$PGM_BIN" hash-file --write "$_blob")
rm "$_blob"

# Update references
_refs=$(mktemp "/tmp/$PGM_BIN-ci-file.XXXXXX")
if [ -n "$_parent" ]; then
    grep -v -x "[a-f0-9]\{40\}\s$_esc_rel_file" "$DATA_DIR/refs" > "$_refs"
else
    cat "$DATA_DIR/refs" > "$_refs"
fi
echo "$_ci_sha$TAB$_rel_file" >> "$_refs"
mv "$_refs" "$DATA_DIR/refs"
